import { ethers } from "ethers";
import { getBlockchain } from "./BlockchainService";
import contract from "../shared/contract.json";
import { API_ENDPOINTS } from "../shared/config";

export const CONTRACT_ABI = contract.abi;
export const CONTRACT_ADDRESS = contract.address;

export interface Metadata {
  [key: string]: any;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ ID
export async function getCertificate(certId: number): Promise<any> {
  try {
    const response = await fetch(API_ENDPOINTS.CERTIFICATES.getById(certId));
    if (response.ok) {
      return await response.json();
    }
  } catch (error) {
    console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ –ë–î, –ø—Ä–æ–±—É–µ–º –±–ª–æ–∫—á–µ–π–Ω:", error);
  }

  const blockchain = await getBlockchain();
  if (!blockchain) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É");
  }

  const { provider } = blockchain;
  const contract = new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider);

  try {
    const certificate = await contract.getCertificate(certId);
    return {
      certificateId: certId,
      issuedTo: certificate.issuedTo,
      issuer: certificate.issuer,
      ipfsHash: certificate.ipfsHash,
      issueDate: new Date(certificate.issueDate * 1000),
    };
  } catch (error) {
    throw new Error("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ –∏ –ë–î");
  }
}

// –í—ã–ø—É—Å–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
export async function issueCertificate(
    ipfsHash: string,
    metadata: Metadata,
    issuedTo: string // üëà –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
): Promise<void> {
  const blockchain = await getBlockchain();
  if (!blockchain) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–ª–æ–∫—á–µ–π–Ω—É");

  const { signer, contract } = blockchain;

  try {
    const issuerAddress = await signer.getAddress(); // ‚úÖ —ç—Ç–æ —Ç–æ—Ç, –∫—Ç–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç
    const tx = await contract.issueCertificate(issuedTo, ipfsHash); // ‚úÖ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    await tx.wait();

    const blockchainHash = tx.hash;
    const certificateId = generateCertificateId();

    const payload = {
      certificateId,
      issuedTo,                     // üëà –∫–æ–º—É –≤—ã–¥–∞–Ω
      issuer: issuerAddress,        // üëà –∫—Ç–æ –≤—ã–¥–∞–ª (MetaMask)
      blockchainHash,
      ipfsHash,
      issueDate: new Date().toISOString(),
      metadata,
    };

    const response = await fetch(API_ENDPOINTS.CERTIFICATES.BASE, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}` // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      const text = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ –ë–î: ${text}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø—É—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:", error);
    throw error;
  }
}


// –û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
export async function revokeCertificate(certId: number): Promise<void> {
  const response = await fetch(API_ENDPOINTS.CERTIFICATES.revoke(certId), {
    method: "PUT",
    headers: {
      Authorization: `Bearer ${localStorage.getItem("token")}`
    }
  });

  if (!response.ok) {
    const text = await response.text();
    throw new Error(text);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function generateCertificateId(): number {
  const timestamp = Date.now();
  const random = Math.floor(Math.random() * 1000);
  return Number(String(timestamp).slice(-6) + String(random).padStart(3, "0"));
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getUserCertificates(address: string) {
  const res = await fetch(`/api/certificates/owned-by/${address}`);
  if (!res.ok) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã");
  return await res.json();
}

